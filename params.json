{"name":"Infrataster","tagline":"Taste(Test) Your Infrastructure's Behavior!","body":"# Infrataster\r\n\r\nInfrastructure Behavior Testing Framework.\r\n\r\n## Usage\r\n\r\n**You can see [example directory](example) too.**\r\n\r\nFirst, create `Gemfile`:\r\n\r\n```ruby\r\nsource 'https://rubygems.org'\r\n\r\ngem 'infrataster'\r\n```\r\n\r\nInstall gems:\r\n\r\n```\r\n$ bundle install\r\n```\r\n\r\nInitialize rspec directory:\r\n\r\n```\r\n$ rspec --init\r\n  create   spec/spec_helper.rb\r\n  create   .rspec\r\n```\r\n\r\n`require 'infrataster/rspec'` and define target servers for testing in `spec/spec_helper.rb`:\r\n\r\n```ruby\r\n# spec/spec_helper.rb\r\nrequire 'infrataster/rspec'\r\n\r\nInfrataster::Server.define(\r\n  :proxy,          # name\r\n  '192.168.33.10', # ip address\r\n  vagrant: true    # for vagrant VM\r\n)\r\nInfrataster::Server.define(\r\n  :app,            # name\r\n  '172.16.33.11',  # ip address\r\n  vagrant: true,   # for vagrant VM\r\n  from: :proxy     # access to this machine via SSH port forwarding from proxy\r\n)\r\nInfrataster::Server.define(\r\n  :db,             # name\r\n  '172.16.33.12',  # ip address\r\n  vagrant: true,   # for vagrant VM\r\n  from: :app,      # access to this machine via SSH port forwarding from app\r\n  mysql: {user: 'app', password: 'app'}\r\n                   # settings for MySQL\r\n)\r\n```\r\n\r\nIf you use `capybara`, you should download and extract [BrowserMob Proxy](http://bmp.lightbody.net/) and set `Infrataster::BrowsermobProxy.bin_path` to binary path in `spec/spec_helper.rb`:\r\n\r\n```ruby\r\n# spec/spec_helper.rb\r\nInfrataster::BrowsermobProxy.bin_path = '/path/to/browsermob/bin/browsermob'\r\n```\r\n\r\nThen, you can write spec files:\r\n\r\n```ruby\r\n# spec/example_spec.rb\r\nrequire 'spec_helper'\r\n\r\ndescribe server(:app) do\r\n  describe http('http://app') do\r\n    it \"responds content including 'Hello Sinatra'\" do\r\n      expect(response.body).to include('Hello Sinatra')\r\n    end\r\n    it \"responds as 'text/html'\" do\r\n      expect(response.header.content_type).to eq('text/html')\r\n    end\r\n  end\r\n  describe capybara('http://app') do\r\n    it \"responds content including 'Hello Sinatra'\" do\r\n      visit '/'\r\n      expect(page).to have_content('Hello Sinatra')\r\n    end\r\n  end\r\nend\r\n\r\ndescribe server(:db) do\r\n  describe mysql_query('SHOW STATUS') do\r\n    it 'responds uptime' do\r\n      row = results.find {|r| r['Variable_name'] == 'Uptime' }\r\n      expect(row['Value'].to_i).to be > 0\r\n    end\r\n  end\r\nend\r\n\r\ndescribe server(:proxy) do\r\n  describe http('http://app') do\r\n    it \"responds content including 'Hello Sinatra'\" do\r\n      expect(response.body).to include('Hello Sinatra')\r\n    end\r\n  end\r\n  describe http('http://static') do\r\n    it \"responds content including 'Welcome to nginx!'\" do\r\n      expect(response.body).to include('Welcome to nginx!')\r\n    end\r\n  end\r\n  describe capybara('http://app') do\r\n    it \"responds content including 'Hello Sinatra'\" do\r\n      visit '/'\r\n      expect(page).to have_content('Hello Sinatra')\r\n    end\r\n  end\r\n  describe capybara('http://static') do\r\n    it \"responds content including 'Welcome to nginx!'\" do\r\n      visit '/'\r\n      expect(page).to have_content('Welcome to nginx!')\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n## Example\r\n\r\n[infrataster/example](example)\r\n\r\n## Presentations\r\n\r\n* https://speakerdeck.com/ryotarai/infrataster-infra-behavior-testing-framework-number-oedo04\r\n\r\n## Contributing\r\n\r\n1. Fork it ( http://github.com/ryotarai/infrataster/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}