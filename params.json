{"name":"Infrataster","tagline":"Infrastructure Acceptance Testing Framework","body":"# Infrataster\r\n\r\n[![Gem Version](https://badge.fury.io/rb/infrataster.png)](http://badge.fury.io/rb/infrataster)\r\n\r\nInfrastructure Behavior Testing Framework.\r\n\r\n## Basic Usage with Vagrant\r\n\r\nFirst, create `Gemfile`:\r\n\r\n```ruby\r\nsource 'https://rubygems.org'\r\n\r\ngem 'infrataster'\r\n```\r\n\r\nInstall gems:\r\n\r\n```\r\n$ bundle install\r\n```\r\n\r\nInstall Vagrant: [Official Docs](http://docs.vagrantup.com/v2/installation/index.html)\r\n\r\nCreate Vagrantfile:\r\n\r\n```ruby\r\n# Vagrantfile\r\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\r\n  config.vm.box = \"hashicorp/precise64\"\r\n\r\n  config.vm.define :proxy do |c|\r\n    c.vm.network \"private_network\", ip: \"192.168.33.10\"\r\n    c.vm.network \"private_network\", ip: \"171.16.33.10\", virtualbox__intnet: \"infrataster-example\"\r\n  end\r\n\r\n  config.vm.define :app do |c|\r\n    c.vm.network \"private_network\", ip: \"171.16.33.11\", virtualbox__intnet: \"infrataster-example\"\r\n  end\r\nend\r\n```\r\n\r\nStart VMs:\r\n\r\n```\r\n$ vagrant up\r\n```\r\n\r\nInitialize rspec directory:\r\n\r\n```\r\n$ rspec --init\r\n  create   spec/spec_helper.rb\r\n  create   .rspec\r\n```\r\n\r\n`require 'infrataster/rspec'` and define target servers for testing in `spec/spec_helper.rb`:\r\n\r\n```ruby\r\n# spec/spec_helper.rb\r\nrequire 'infrataster/rspec'\r\n\r\nInfrataster::Server.define(\r\n  :proxy,          # name\r\n  '192.168.33.10', # ip address\r\n  vagrant: true    # for vagrant VM\r\n)\r\nInfrataster::Server.define(\r\n  :app,            # name\r\n  '172.16.33.11',  # ip address\r\n  vagrant: true,   # for vagrant VM\r\n  from: :proxy     # access to this machine via SSH port forwarding from proxy\r\n)\r\n\r\n# Code generated by `rspec --init` is following...\r\n```\r\n\r\nThen, you can write spec files:\r\n\r\n```ruby\r\n# spec/example_spec.rb\r\nrequire 'spec_helper'\r\n\r\ndescribe server(:app) do\r\n  describe http('http://app') do\r\n    it \"responds content including 'Hello Sinatra'\" do\r\n      expect(response.body).to include('Hello Sinatra')\r\n    end\r\n    it \"responds as 'text/html'\" do\r\n      expect(response.headers['content-type']).to match(%r{^text/html})\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nRun tests:\r\n\r\n```\r\n$ bundle exec rspec\r\n2 examples, 2 failures\r\n```\r\n\r\nCurrently, the tests failed because the VM doesn't respond to HTTP request.\r\n\r\nIt's time to write provisioning instruction like Chef's cookbooks or Puppet's manifests!\r\n\r\n## Server\r\n\r\n\"Server\" is a server you tests. This supports Vagrant, which is very useful to run servers for testing. Of course, you can test real servers.\r\n\r\nYou should define servers in `spec_helper.rb` like the following:\r\n\r\n```ruby\r\nInfrataster::Server.define(\r\n  # Name of the server, this will be used in the spec files.\r\n  :proxy,\r\n  # IP address of the server\r\n  '192.168.44.10',\r\n  # If the server is provided by vagrant and this option is true,\r\n  # SSH configuration to connect to this server is got from `vagrant ssh-config` command automatically.\r\n  vagrant: true,\r\n)\r\n\r\nInfrataster::Server.define(\r\n  # Name of the server, this will be used in the spec files.\r\n  :app,\r\n  # IP address of the server\r\n  '172.16.44.11',\r\n  # If the server is provided by vagrant and this option is true,\r\n  # SSH configuration to connect to this server is got from `vagrant ssh-config` command automatically.\r\n  vagrant: true,\r\n  # Which gateway is used to connect to this server by SSH port forwarding?\r\n  from: :proxy,\r\n  # options for resources\r\n  mysql: {user: 'app', password: 'app'},\r\n)\r\n```\r\n\r\nYou can specify SSH configuration manually too:\r\n\r\n```ruby\r\nInfrataster::Server.define(\r\n  # ...\r\n  ssh: {host: 'hostname', user: 'testuser', keys: ['/path/to/id_rsa']}\r\n)\r\n```\r\n\r\n## Resources\r\n\r\n\"Resource\" is what you test by Infrataster. For instance, the following code describes `http` resource.\r\n\r\n```ruby\r\ndescribe server(:app) do\r\n  describe http('http://example.com') do\r\n    it \"responds content including 'Hello Sinatra'\" do\r\n      expect(response.body).to include('Hello Sinatra')\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### `http` resource\r\n\r\n`http` resource tests HTTP response when sending HTTP request.\r\nIt accepts `method`, `params` and `header` as options.\r\n\r\n```ruby\r\ndescribe server(:app) do\r\n  describe http(\r\n    'http://app.example.com',\r\n    method: :post,\r\n    params: {'foo' => 'bar'},\r\n    headers: {'USER' => 'VALUE'}\r\n  ) do\r\n    it \"responds with content including 'app'\" do\r\n      expect(response.body).to include('app')\r\n\r\n      # `response` is a instance of `Faraday::Response`\r\n      # See: https://github.com/lostisland/faraday/blob/master/lib/faraday/response.rb\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### `capybara` resource\r\n\r\n`capybara` resource tests your web application by simulating real user's interaction.\r\n\r\n```ruby\r\ndescribe server(:app) do\r\n  describe capybara('http://app.example.com') do\r\n    it 'shows food list' do\r\n      visit '/'\r\n      click_link 'Foods'\r\n      expect(page).to have_content 'Yummy Soup'\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nIf you use `capybara`, you should download and extract [BrowserMob Proxy](http://bmp.lightbody.net/) and set `Infrataster::BrowsermobProxy.bin_path` to binary path in `spec/spec_helper.rb`:\r\n\r\n```ruby\r\n# spec/spec_helper.rb\r\nInfrataster::BrowsermobProxy.bin_path = '/path/to/browsermob/bin/browsermob'\r\n```\r\n\r\n(BrowserMob Proxy is needed to manipulate Host HTTP header.)\r\n\r\n### `mysql_query` resource\r\n\r\n`mysql_query` resource tests responce for mysql query.\r\n\r\n```ruby\r\ndescribe server(:db) do\r\n  describe mysql_query('SHOW STATUS') do\r\n    it 'returns positive uptime' do\r\n      row = results.find {|r| r['Variable_name'] == 'Uptime' }\r\n      expect(row['Value'].to_i).to be > 0\r\n\r\n      # `results` is a instance of `Mysql2::Result`\r\n      # See: https://github.com/brianmario/mysql2\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nYou can specify username and password by options passed to `Infrataster::Server.define`:\r\n\r\n```ruby\r\nInfrataster::Server.define(\r\n  # ...\r\n  mysql: {user: 'app', password: 'app'}\r\n)\r\n```\r\n\r\n## Example\r\n\r\n* [example](example)\r\n* [spec/integration](spec/integration)\r\n\r\n## Tests\r\n\r\n### Unit Tests\r\n\r\nUnit tests are under `spec/unit` directory.\r\n\r\n```\r\n$ bundle exec rake spec:unit\r\n```\r\n\r\n### Integration Tests\r\n\r\nIntegration tests are under `spec/integration` directory.\r\n\r\n```\r\n$ bundle exec rake spec:integration:prepare\r\n$ bundle exec rake spec:integration\r\n```\r\n\r\n## Presentations\r\n\r\n* https://speakerdeck.com/ryotarai/infrataster-infra-behavior-testing-framework-number-oedo04\r\n\r\n## Changelog\r\n\r\n[Changelog](CHANGELOG.md)\r\n\r\n## Contributing\r\n\r\n1. Fork it ( http://github.com/ryotarai/infrataster/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}